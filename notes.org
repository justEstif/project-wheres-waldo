* Notes

- you'll build an app that feels a whole lot like a photo tagging app
- you'll start with a large photograph, which contains several elements that the user is meant to find
  - [[https://wallpaperaccess.com/wheres-waldo][site to find images]]
  - I have decided on using the 2022 r/place final picture
    - I will be using the 2k quality which is good enough and wouldn't take that long to load
- the user will make selections for each character and they will get feedback on whether they are correct or not
  - I will be doing a simple flag game, so I will find a couple of flags and make the user pick from among them
- you need to choose a photo, identify where exactly each person is and save that to the database
  - when the user clicks the photo, it should place a targeting box around the portion of the photo where the user has clicked
  - that box should contain a list of possible characters
  - when the user selected one of there characters, you should check with your back-end to see if that character is actually within the targeting box.
    - provide the user with appropriate feedback,
      - if wrong => an error message
      - if correct => place a marker on the photo in the character's location
      - *remove the targeting box until the user clicks again*
  - keep track of how long it takes between when the photo is first loaded and when the user finally identifies all characters
    - do this on the server side
    - once a round is complete, ask the user for his/her name and record that time.
* Steps: [3/9]

1. [X] setup github ~repo~
2. [X] think about the project on paper.
3. [X] create a firebase project, and link with project
4. [ ] build the front-end functionality without actually using any calls to the back-end
   - [ ] the functionality which pops the targeting box and drop-down menu on the screen when the user click on the photo and removes it when the user clicks away
     - [ ] is this ~async~?
5. [ ] hook up the functionality for validating with your back end whether the user has clicked in the right place for that character
6. [ ] tie it into your front end so you can seamlessly select characters, validate theme, and place the appropriate markets on the map if the selection was correct
7. [ ] add the ability to time the user from when they first load the page and then display their score time after they have identified all characters
   - [ ] create a popup that asks them to enter their name for the high score table if they have earned it
8. [ ] play
9. [ ] push to github, and host

** Optional

- Load many images into your database and allow the user to select from among them before starting the game

* Thought Process

** DONE Find out exactly where on an image someone clicked
- I was able to display where on the image the user moved the mouse over, and add an overlay to that part
- I used styled components for this.
*** DONE Next is to trigger it only ~onClick~
*** TODO Make the overlay stay if the user gets the answer right
*** TODO Make the form hide on submit
** TODO Find out how to box around a specific part of an image
- I don't have to box around a specific part of the image. I just need to find the boundaries, and if the user gets the answer right around that area, it would be considered correct.
- I will have a confirm answer function that will take in the clicked coordinates, and the form answer, and compare it with the value in the database.
  - what if the click somewhere else though? => if the next click is not the form, we disable the form??
- maybe we would have a ~handlechange~ function that would be attached to the image
  - if I find the max and min x and y, I could use a simple subtraction and if else statement
  - when the image is clicked, it would pass in the event, which would have an x and y position and if the x and y are not part of any of the stored positions, it would return nothing, else it would have a response
    #+begin_src js
const clicked = [x,y]
if((x <= maxX || x>= minX) && (y <= maxY || y >= minY))
    printOptionsOnPoint(clicked)
else return
    #+end_src

** TODO store one collection like this
    #+begin_src js
const characters = {
    waldo : {
       name: "Waldo",
       positions: [....]
    }
}
    #+end_src
** TODO how do I do this?
  - we can make the options in some sort of state, and one of the options will always be the correct option ~const [options, setOptions]~, and then we remove it from list if it is correct
** TODO how do I keep track of the time?
** DONE what hidden things should be in the picture
- My app will start with finding 5 flags in the r/place, and it could add more options later
- they will be an array of objects
** DONE Create firestore project
*** DONE link it with github
** TODO change cursor instead of using a pointer component
- maybe
** TODO Create a better designed form for the submission
*** TODO make it use radio buttons
** TODO Create table of values with hand
** TODO Figure out how to add the values to the database and access it
** TODO the overlay and form must be encapsulated in a separate div
** TODO the overlay needs to be left there is the user is correct
** TODO if the user clicks somewhere else though, we have to do something else though
** TODO what is the proper naming style for styled components

* Components

** App

** DropdownForm
#+begin_src
this is a FormDiv in a DropDownDiv
- the DropDownDiv is to control whether is visible or not
- the form div is for styling the form itself
- NOTE the DropDownDiv and OverlayDiv play similar roles
#+end_src
** Image
- returns a ImgDiv with a background image applied
** Overlay
- DropdownForm + Pointer
- NOTE: remove this later
** Pointer
*** I need to remove this and just use a custom cursor
* Functions
- handleClick
- handleMouseMove
- handleSubmit

  | Country | x-mi | y-min | x-max | y-max |
  | Waldo   | 2573 |   403 |  2618 |   452 |
  | Greece  | 2099 |  2886 |  2273 |  2953 |
  | Algeria | 2307 |  2370 |  2546 |  2415 |
